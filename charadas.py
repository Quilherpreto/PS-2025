from tkinter import *
from tkinter import messagebox

root = Tk()
root.configure(bg="black") 
root.geometry("{0}x{1}+0+0".format(root.winfo_screenwidth(), root.winfo_screenheight()))
# Vari√°veis para armazenar as perguntas e respostas
questions = [
    "Charada 1:\nEu sou um gostoso \neu sou leal e inteligente\n\nAl√©m disso, se voc√™ olhar para Pi, eu estarei l√°.\nQuem eu sou?",
    "Charada 2:\nSou um n√∫mero primo menor que 10.\nSe me elevar ao quadrado, subtra√≠rem 6 e multiplicarem por 3, obter√°s 81. Qual √© o meu n√∫mero?",
    "Charada 3:\nUm corpo acelerando em dire√ß√£o ao rosto do seu amigo a 10 m/s¬≤\ntem massa similar a de uma x√≠cara de 300 g,\nqual a for√ßa m√≠nima que voc√™ tem que aplicar para que ele n√£o se machuque?",
    "Charada 4:\nEu sou um n√∫mero inteiro positivo.\nQuando dividido por 2, resulto em um quociente inteiro e resto zero.\nAl√©m disso, minha origem est√° na soma dos cinco primeiros n√∫meros primos consecutivos,\ndividida por um primo distinto de 2.\nVoc√™ sabe quem sou eu?",
    "Charada 5:\nSou um n√∫mero primo menor que 10.\nSe me multiplicarem por 4, subtra√≠rem 10 e depois dividirem por 2, obter√£o 9.\nQual √© o meu n√∫mero??",
    "Charada 6:\nUm corpo acelerando em dire√ß√£o ao rosto do seu amigo a 10 m/s¬≤\ntem massa similar a de uma x√≠cara de 200 g,\nqual a for√ßa m√≠nima que voc√™ tem que aplicar para que ele n√£o se machuque.",
    "Parab√©ns, voc√™ concluiu a PRIMEIRA etapa :) üéÜüéÜ\nAgora seu desafio ser√° muito maior,o que teremos a seguir nesse angar de naves ??? hehe\nBoa sorte!\n\nEm um hangar de naves,\nEncontrei um tesouro perdido,\nCom ele, posso montar um c√≥digo,\nQue, em um mundo digital,\nMe levar√° a um novo caminho.\n\n",
    "Meu Deus, voc√™ n√£o desiste hein, vamos dificultar um pouquinho agora üëø\n\nAgora vamos pegar voc√™ espertinhoüî™üò°\n\n**Em uma espa√ßonave,\nDois mist√©rios est√£o escondidos,\nUm deles √© uma cifra,\nO outro √© uma chave.\nJuntos, eles formam um mist√©rio,\nMas qual √© esse mist√©rio?**\n\n",
]

answers = [
    "Gui",  # 5
    "1",  # 7
    "1",  # 3
    "1",  # 4
    "1",  # 7
    "1",  # 2
    "onepieto",  #! Dica : O tesouro perdido s√£o as pe√ßas do √°baco, que representam os d√≠gitos de um n√∫mero na tabela ASCII.
    "1",
]

# Dicas para cada charada
hints = [
    "Dica: Pense no que aparece nos primeiros d√≠gitos de œÄ (pi) = 3,14159...",
    "Dica: Teste os n√∫meros primos menores que 10: 2, 3, 5, 7. Qual deles satisfaz a equa√ß√£o?",
    "Dica: Use F = m √ó a. Massa = 300g = 0,3kg, acelera√ß√£o = 10 m/s¬≤",
    "Dica: Os 5 primeiros primos s√£o: 2, 3, 5, 7, 11. Some todos e divida por um primo diferente de 2",
    "Dica: Teste cada primo menor que 10 na f√≥rmula: (x √ó 4 - 10) √∑ 2 = 9",
    "Dica: Use F = m √ó a. Massa = 200g = 0,2kg, acelera√ß√£o = 10 m/s¬≤",
    "Dica: 'onepieto' pode estar relacionado com One Piece + algo mais...",
    "Dica: Pense em criptografia. Cifra + Chave = ?",
]

# √çndice da pergunta atual
question_index = 0

# Vari√°vel para controlar se o jogo foi iniciado
game_started = False

# Vari√°vel para controlar se a dica foi usada na pergunta atual
hint_used = False

# Vari√°vel para contar erros na pergunta atual
errors_count = 0

# Vari√°vel para armazenar o tempo restante
time_left = 2400  # 40 minutos

# Fun√ß√£o para iniciar o jogo
def start_game():
    global game_started
    game_started = True
    
    # Esconder elementos da tela inicial
    title_label.pack_forget()
    start_button.pack_forget()
    
    # Mostrar elementos do jogo
    question.pack(pady=15)
    hint_label.pack(pady=10)  # Espa√ßo para a dica
    answer_entry.pack(pady=15)
    answer_entry.focus_set()  # Faz o cursor aparecer na caixa de entrada
    
    # BOT√ÉO DE DICA PRIMEIRO - bem vis√≠vel
    hint_button.pack(pady=15)
    
    # Depois o bot√£o de verificar
    check_button.pack(pady=10)
    
    # Timer por √∫ltimo
    timer_label.pack(pady=15)
    
    # Iniciar o temporizador
    update_timer()

# Tela inicial
title_label = Label(
    root, 
    text="üéÆ JOGO DE CHARADAS üéÆ\n\nVoc√™ ter√° 40 minutos para responder 8 charadas!\n\nSistema de Penalidades por pergunta:\n1¬∫ erro: -5s | 2¬∫ erro: -10s | 3¬∫+ erro: -15s\nDica: -60s\n\nBoa sorte! üçÄ", 
    fg="white", 
    bg="black", 
    font=("Helvetica", 22),
    justify=CENTER
)
title_label.pack(expand=True)

start_button = Button(
    root,
    text="üöÄ INICIAR JOGO üöÄ",
    command=start_game,
    fg="black",
    bg="green",
    font=("Helvetica", 35, "bold"),
    padx=30,
    pady=15
)
start_button.pack(expand=True)

# Criar elementos do jogo (inicialmente ocultos)
question = Label(
    root, text=questions[question_index], fg="white", bg="black", font=("Helvetica", 30)
)

# Label para mostrar a dica (inicialmente vazio)
hint_label = Label(
    root, text="", fg="yellow", bg="black", font=("Helvetica", 20), wraplength=800
)

answer_entry = Entry(root, width=50, fg="white", bg="black", font=("Helvetica", 30))


# Fun√ß√£o para mostrar dica
def show_hint():
    global time_left, hint_used
    if not hint_used:
        # Penalizar em 60 segundos
        time_left -= 60
        hint_used = True
        
        # Mostrar a dica
        hint_label.config(text=hints[question_index])
        hint_button.config(state=DISABLED, text=" DICA USADA", bg="gray", fg="black")
        
        messagebox.showinfo("Dica", f"Dica revelada! Penalidade: -60 segundos\n\n{hints[question_index]}")
    else:
        messagebox.showinfo("Dica", "Voc√™ j√° usou a dica desta pergunta!")


# Fun√ß√£o para atualizar o temporizador
def update_timer():
    global time_left
    # S√≥ atualizar se o jogo foi iniciado
    if not game_started:
        return
        
    # Se ainda houver tempo restante, diminuir o tempo e atualizar o r√≥tulo do temporizador
    if time_left > 0:
        time_left -= 1
        minutes = time_left // 60
        seconds = time_left % 60
        timer_label.config(
            text=f"Tempo restante: {minutes} minutos e {seconds} segundos"
        )
        # Agendar a pr√≥xima atualiza√ß√£o para daqui a 1 segundo (1000 milissegundos)
        root.after(1000, update_timer)
    else:
        messagebox.showinfo("Tempo esgotado", "O tempo acabou!")


# Adicionar um r√≥tulo para o temporizador (inicialmente oculto)
timer_label = Label(
    root,
    text=f"Tempo restante: {time_left} segundos",
    fg="red",
    bg="black",
    font=("Helvetica", 59),
)


# Fun√ß√£o para verificar a resposta
def check_answer():
    global question_index, time_left, hint_used, errors_count
    # Pegar o valor da entrada de texto
    answer = answer_entry.get()
    # Verificar se a resposta est√° correta
    if answer == answers[question_index]:
        # Avan√ßar para a pr√≥xima pergunta
        question_index += 1
        # Resetar a dica e erros para a pr√≥xima pergunta
        hint_used = False
        errors_count = 0
        hint_label.config(text="")
        hint_button.config(state=NORMAL, text=" DICA (-60s)", bg="red", fg="white")
        
        # Se ainda houver perguntas, mostrar a pr√≥xima pergunta
        if question_index < len(questions):
            question.config(text=questions[question_index])
            # Limpar a entrada de texto
            answer_entry.delete(0, "end")
        else:
            messagebox.showinfo("Fim", "Parab√©ns, voc√™ respondeu todas as perguntas!")
    else:
        # Incrementar contador de erros na pergunta atual
        errors_count += 1
        
        # Sistema de penalidade progressiva (m√°ximo 15s)
        if errors_count == 1:
            penalty = 5
            message = "1¬∫ erro nesta pergunta: -5 segundos"
        elif errors_count == 2:
            penalty = 10
            message = "2¬∫ erro nesta pergunta: -10 segundos"
        else:  # 3 ou mais erros - sempre 15s (n√£o acumulativo)
            penalty = 15
            message = f"{errors_count}¬∫ erro nesta pergunta: -15 segundos"
        
        # Aplicar penalidade
        time_left -= penalty
        messagebox.showinfo("Resposta Incorreta", f"{message}\n\nTente novamente!")


# Criar bot√µes (inicialmente ocultos)
hint_button = Button(
    root,
    text=" DICA (-60s)",
    command=show_hint,
    fg="white",
    bg="red",
    font=("Helvetica", 30, "bold"),
    padx=40,
    pady=15
)

check_button = Button(
    root,
    text="‚úÖ VERIFICAR RESPOSTA",
    command=check_answer,
    fg="white",
    bg="blue",
    font=("Helvetica", 25, "bold"),
    padx=30,
    pady=10
)

# Iniciar o loop principal (o timer s√≥ inicia quando o jogo come√ßar)
root.mainloop()
